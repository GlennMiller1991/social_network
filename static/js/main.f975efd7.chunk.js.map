{"version":3,"sources":["components/Content/Nava/Nava.module.css","components/Content/Dialogs/Dialogs.module.css","components/Content/Content.module.css","components/Content/Posts/Post/Post.module.css","components/Content/Sidebar/Sidebar.module.css","components/Header/Header.module.css","components/Content/Dialogs/Chat/Chat.module.css","components/Content/Posts/Post/LikesCount/LikesCount.module.css","components/Content/ShareStory/ShareStory.module.css","components/Footer/Footer.module.css","reportWebVitals.ts","redux/postsReducer.ts","redux/shareStoryReducer.ts","redux/dialogsReducer.ts","redux/sidebarReducer.ts","redux/profileReducer.ts","redux/redux_store.ts","components/Header/Header.tsx","components/Content/Nava/Nava.tsx","components/Content/Posts/Post/LikesCount/LikesCount.tsx","components/Content/Posts/Post/LikesCount/LIkesCountContainer.tsx","components/Content/Posts/Post/Post.tsx","redux/StoreContext.ts","components/Content/Posts/Posts.tsx","components/Content/Sidebar/BestPosts/BestPosts.tsx","components/Content/Sidebar/Tags/Tag/Tag.tsx","components/Content/Sidebar/Tags/Tags.tsx","components/Content/Sidebar/Sidebar.tsx","components/Content/Dialogs/Chat/Chat.tsx","components/Content/Dialogs/OpenDialog/OpenDialog.tsx","components/Content/Dialogs/Dialogs.tsx","components/Content/Best/Best.tsx","components/Content/ShareStory/ShareStory.tsx","components/Content/Profile/Comment/Comment.tsx","components/Content/Profile/Profile.tsx","components/Content/Profile/ProfileContainer.tsx","components/Content/Content.tsx","components/Footer/Footer.tsx","App.tsx","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","CHANGE_LIKES_COUNT","ADD_POST","FILTER","initialState","posts","postText","postPhoto","postDate","postLikes","postId","v1","filter","CHANGE_SHARE_STORY_TEXT","changeShareStoryTextActionCreator","text","type","shareStoryText","storyText","chat","id","author","message","dialogs","name","tags","priority","bestPosts","CHANGE_NEW_COMMENT_TEXT","ADD_COMMENT","changeNewCommentTextActionCreator","newComm","comments","answer","reducers","combineReducers","postsPage","state","action","obj","find","post","value","postMessage","trim","newPost","Date","getDate","getMonth","getFullYear","push","postsForRender","filterValue","sort","postA","postB","profilePage","comment","shareStoryPage","dialogsPage","sideBar","store","createStore","Header","props","styles","header","textContainer","enterBtn","onClick","setWay","imgBtn","src","alt","NavaSecret","nava","className","button","activeClassName","active","to","search","searchBar","Nava","React","memo","LikesCountSecret","like","btn","changeLikesCount","likesCount","LikesCount","LikesCountContainerSecret","change","dispatch","changeLikesCountActionCreator","LikesCountContainer","PostSecret","postInfo","image","Post","StoreContext","createContext","PostsSecret","Consumer","getState","onChange","event","currentTarget","classes","map","Posts","BestPostsSecret","bestPost","BestPosts","TagSecret","tagStyle","fontSize","style","Tag","TagsSecret","tag","Tags","SidebarSecret","sidebar","Sidebar","ChatSecret","mappedMessages","messages","m","you","notYou","Chat","OpenDialogSecret","openDialog","OpenDialog","DialogsSecret","useState","setFilter","filteredMessages","filterMessages","container","openDialogs","dialog","Dialogs","BestSecret","Best","ShareStorySecret","error","ref","createRef","placeholder","maxLength","txt","current","ShareStory","CommentSecret","Comment","ProfileSecret","com","onChangeCallback","onClickCallback","Profile","ProfileContainerSecret","ProfileContainer","Content","content","contentContent","general","path","exact","render","component","FooterSecret","footer","href","Footer","AppSecret","way","App","renderEntireTree","ReactDOM","StrictMode","Provider","bind","document","getElementById","subscribe"],"mappings":"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","file":"static/js/main.f975efd7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nava\":\"Nava_nava__1Txrr\",\"button\":\"Nava_button__3UGRg\",\"active\":\"Nava_active__1OPDb\",\"searchBar\":\"Nava_searchBar__2s9wB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Dialogs_container__2sluC\",\"filter\":\"Dialogs_filter__3BzKz\",\"openDialogs\":\"Dialogs_openDialogs__1BPAE\",\"dialogs\":\"Dialogs_dialogs__15U5l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Content_content__EVS44\",\"nava\":\"Content_nava__3MGrF\",\"contentContent\":\"Content_contentContent__3uM9c\",\"sidebar\":\"Content_sidebar__1Gjnn\",\"general\":\"Content_general__3V4UQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__22c__\",\"text\":\"Post_text__1H0C7\",\"image\":\"Post_image__7k2jT\",\"postText\":\"Post_postText__2SCZt\",\"postAuthor\":\"Post_postAuthor__1XwFO\",\"postDate\":\"Post_postDate__3-iXS\",\"postLikes\":\"Post_postLikes__3I43s\",\"postRate\":\"Post_postRate__3OpKe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar\":\"Sidebar_sidebar__1zX0I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2fUTx\",\"textContainer\":\"Header_textContainer__1X9wE\",\"enterBtn\":\"Header_enterBtn__3RCTD\",\"imgBtn\":\"Header_imgBtn__kMlQ0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"you\":\"Chat_you__Q3Ix2\",\"notYou\":\"Chat_notYou__3d_-V\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"like\":\"LikesCount_like__suXhL\",\"btn\":\"LikesCount_btn__2n-I1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"txt\":\"ShareStory_txt__1JeGs\",\"btn\":\"ShareStory_btn__6N4t5\",\"error\":\"ShareStory_error__1FXdd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__2HV5Q\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {v1} from \"uuid\";\r\nimport {actionsType} from \"./redux_store\";\r\n\r\n//constants\r\nconst CHANGE_LIKES_COUNT = \"CHANGE-LIKES-COUNT\";\r\nconst ADD_POST = \"ADD-POST\"\r\nconst FILTER = 'FILTER'\r\n\r\n//actions types\r\nexport type changeLikesCountActionType = ReturnType<typeof changeLikesCountActionCreator>\r\nexport type addPostActionType = ReturnType<typeof addPostActionCreator>\r\nexport type filterPostsActionType = ReturnType<typeof filterPostsActionCreator>\r\n\r\n//types\r\nexport type PostType = {\r\n    postText: string\r\n    postPhoto: string\r\n    postDate: string\r\n    postLikes: number\r\n    postId: string\r\n}\r\nexport type postsPageType = {\r\n    posts: Array<PostType>\r\n    filter: string\r\n}\r\n\r\n//action creators\r\nexport const changeLikesCountActionCreator = (change: boolean, postId: string) => {\r\n    return {type: CHANGE_LIKES_COUNT, postId: postId, value: change} as const\r\n}\r\nexport const addPostActionCreator = (value: string) => {\r\n    return {type: ADD_POST, postMessage: value} as const\r\n}\r\nexport const filterPostsActionCreator = (filterValue: string) => {\r\n    return {\r\n        type: FILTER,\r\n        filterValue: filterValue\r\n    } as const\r\n\r\n}\r\n\r\nconst initialState: postsPageType = {\r\n    posts: [\r\n        {\r\n            postText: 'Is there anybody going to listen to my story' +\r\n                '? All about girl who came to stay. She is a kind of girl you' +\r\n                'want so much, it makes you sorry, still you don\\'t regret a single day',\r\n            postPhoto: 'https://www.culturesonar.com/wp-content/uploads/2017/08/beatles-with-a-girl-getty-600x400.jpg',\r\n            postDate: '07.23.2021',\r\n            postLikes: -1,\r\n            postId: v1(),\r\n        },\r\n        {\r\n            postText: 'Когда в нашем городе только зарождался первый частный' +\r\n                ' приют для животных, я пошла туда волонтёром. Была хорошо знакома' +\r\n                ' с организаторами этого дела, видела, как они стараются ради' +\r\n                ' хвостатых. Тогда они ещё ездили на скромных машинах и работали' +\r\n                ' на основной работе.\\n' +\r\n                'Прошло уже почти десять лет. У тех барышень свои частные коттеджи' +\r\n                ' в элитном районе города, дорогие машины и прочие блага. ' +\r\n                'И всё это притом, что они уже лет пять не работают нигде, кроме' +\r\n                ' как безвозмездно руководят приютом. Хм.',\r\n            postPhoto: 'https://www.culturesonar.com/wp-content/uploads/2017/08/beatles-with-a-girl-getty-600x400.jpg',\r\n            postDate: '06.23.2021',\r\n            postLikes: 2,\r\n            postId: v1()\r\n        },\r\n        {\r\n            postText: 'Хм.',\r\n            postPhoto: 'https://www.culturesonar.com/wp-content/uploads/2017/08/beatles-with-a-girl-getty-600x400.jpg',\r\n            postDate: '08.23.2021',\r\n            postLikes: 1,\r\n            postId: v1()\r\n        }],\r\n    filter: 'date'\r\n}\r\n\r\nexport const postsReducer = (state: postsPageType = initialState, action: actionsType): postsPageType => {\r\n    switch (action.type) {\r\n        case CHANGE_LIKES_COUNT:\r\n            const obj = state.posts.find((post) => post.postId === action.postId)\r\n            if (obj) {\r\n                action.value ? obj.postLikes++ : obj.postLikes--\r\n            }\r\n            return state\r\n        case ADD_POST:\r\n            if (action.postMessage.trim()) {\r\n                const newPost: PostType = {\r\n                    postText: action.postMessage,\r\n                    postPhoto: 'https://helo',\r\n                    postDate: `${new Date().getDate()}.${new Date().getMonth()}.${new Date().getFullYear()}}`,\r\n                    postLikes: 0,\r\n                    postId: v1()\r\n                }\r\n                state.posts.push(newPost)\r\n            }\r\n            return state\r\n        case FILTER:\r\n            const postsForRender = state.posts\r\n            switch (action.filterValue) {\r\n                case \"rate\":\r\n                    postsForRender.sort((postA, postB) => {\r\n                        return postA.postLikes > postB.postLikes ? -1 : 1\r\n                    })\r\n                    return {posts: postsForRender, filter: 'rate'}\r\n                case \"reverse rate\":\r\n                    postsForRender.sort((postA, postB) => {\r\n                        return postA.postLikes > postB.postLikes ? 1 : -1\r\n                    })\r\n                    return {posts: postsForRender, filter: 'reverse rate'}\r\n                case 'date':\r\n                default:\r\n                    return {posts: postsForRender, filter: 'date'}\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import {actionsType} from \"./redux_store\";\r\n\r\n//constants\r\nconst CHANGE_SHARE_STORY_TEXT = 'CHANGE-SHARE-STORY-TEXT'\r\n\r\n//actions creators\r\nexport const changeShareStoryTextActionCreator = (text: string) => {\r\n    return {\r\n        type: CHANGE_SHARE_STORY_TEXT,\r\n        shareStoryText: text\r\n    } as const\r\n}\r\n\r\n//actions types\r\nexport type changeShareStoryTextActionType = ReturnType<typeof changeShareStoryTextActionCreator>\r\n\r\n//data\r\nconst initialState = {\r\n    storyText: ''\r\n}\r\n\r\n//types\r\nexport type shareStoryPageType = {\r\n    storyText: string\r\n}\r\n\r\n//reducer\r\nexport const shareStoryReducer = (state: shareStoryPageType = initialState, action: actionsType) => {\r\n    switch(action.type) {\r\n        case CHANGE_SHARE_STORY_TEXT:\r\n            state.storyText = action.shareStoryText\r\n            return state\r\n        default:\r\n            return state\r\n    }\r\n}","import {v1} from \"uuid\";\r\nimport {actionsType} from \"./redux_store\";\r\n\r\n//types\r\nexport type ChatType = {\r\n    id: string\r\n    author: 'you' | 'notYou'\r\n    message: string\r\n}\r\nexport type OpenDialogType = {\r\n    id: string\r\n    name: string\r\n}\r\nexport type dialogsPageType = {\r\n    chat: Array<ChatType>\r\n    dialogs: Array<OpenDialogType>\r\n}\r\n\r\n//action creators\r\n\r\n\r\n\r\nconst initialState: dialogsPageType = {\r\n    chat: [\r\n        {\r\n            id: v1(),\r\n            author: 'notYou',\r\n            message: 'How are you'\r\n        },\r\n        {\r\n            id: v1(),\r\n            author: 'you',\r\n            message: 'How are you'\r\n        },\r\n        {\r\n            id: v1(),\r\n            author: 'notYou',\r\n            message: 'How are you'\r\n        },\r\n\r\n    ],\r\n    dialogs: [\r\n        {name: 'Katya', id: v1()},\r\n        {name: 'Dasha', id: v1()},\r\n        {name: 'Anna', id: v1()},\r\n        {name: 'Viktor', id: v1()},\r\n        {name: 'Andrey', id: v1()},\r\n    ],\r\n}\r\n\r\nexport const dialogsReducer = (state: dialogsPageType = initialState, action: actionsType): dialogsPageType => {\r\n    switch (action.type) {\r\n        default:\r\n            return state\r\n    }\r\n}","import {v1} from \"uuid\";\r\nimport {actionsType} from \"./redux_store\";\r\n\r\n\r\n//types\r\nexport type bestPostType = {\r\n    text: string\r\n    id: string\r\n}\r\nexport type tagType = {\r\n    name: string\r\n    priority: number\r\n}\r\nexport type sideBarType = {\r\n    tags: Array<tagType>\r\n    bestPosts: Array<bestPostType>\r\n}\r\n\r\n//data\r\nconst initialState = {\r\n    tags: [\r\n        {\r\n            name: 'Family',\r\n            priority: 9,\r\n        },\r\n        {\r\n            name: 'Strange',\r\n            priority: 16,\r\n        },\r\n        {\r\n            name: 'Love',\r\n            priority: 14,\r\n        },\r\n        {\r\n            name: 'Pizdec',\r\n            priority: 20,\r\n        },\r\n        {\r\n            name: 'Scary',\r\n            priority: 13,\r\n        },\r\n        {\r\n            name: 'Childhood',\r\n            priority: 12,\r\n        },\r\n        {\r\n            name: 'Work',\r\n            priority: 22,\r\n        },\r\n    ],\r\n    bestPosts: [\r\n        {text: 'Best post', id: v1()},\r\n        {text: 'Best post', id: v1()},\r\n        {text: 'Best post', id: v1()},\r\n        {text: 'Best post', id: v1()},\r\n        {text: 'Best post', id: v1()},\r\n        {text: 'Best post', id: v1()},\r\n    ],\r\n}\r\n\r\n//reducer\r\nexport const sidebarReducer = (state: sideBarType = initialState, action: actionsType): sideBarType  => {\r\n    switch (action.type) {\r\n        default:\r\n            return state\r\n    }\r\n}","import {v1} from \"uuid\";\r\nimport {actionsType} from \"./redux_store\";\r\n\r\n//constants\r\nconst CHANGE_NEW_COMMENT_TEXT = 'CHANGE-NEW-COMMENT-TEXT'\r\nconst ADD_COMMENT = 'ADD-COMMENT'\r\n\r\n//action creators\r\nexport const changeNewCommentTextActionCreator = (newComm: string) => {\r\n    return {\r\n        type: CHANGE_NEW_COMMENT_TEXT,\r\n        newComm: newComm\r\n    } as const\r\n}\r\nexport const addCommentActionCreator = (text: string) => {\r\n    return {\r\n        type: ADD_COMMENT,\r\n        comment: text\r\n    } as const\r\n}\r\n\r\n//types\r\nexport type commentType = {\r\n    id: string\r\n    postId: string\r\n    text: string\r\n    answer: string\r\n}\r\nexport type ProfilePageType = {\r\n    comments: commentType[]\r\n    newComm: string\r\n}\r\n\r\n//actions types\r\nexport type addCommentActionType = ReturnType<typeof addCommentActionCreator>\r\nexport type changeNewCommentTextActionType = ReturnType<typeof changeNewCommentTextActionCreator>\r\n\r\n//data\r\nconst comments: commentType[] = [\r\n    {\r\n        id: v1(),\r\n        postId: v1(),\r\n        text: 'hello',\r\n        answer: v1()\r\n    },\r\n    {\r\n        id: v1(),\r\n        postId: v1(),\r\n        text: 'hello',\r\n        answer: v1()\r\n    },\r\n    {\r\n        id: v1(),\r\n        postId: v1(),\r\n        text: 'hello',\r\n        answer: v1()\r\n    }\r\n]\r\nconst initialState = {\r\n    comments: comments,\r\n    newComm: ''\r\n}\r\n\r\n//reducer\r\nexport const profileReducer = (state:ProfilePageType = initialState, action: actionsType) => {\r\n    switch (action.type) {\r\n        case CHANGE_NEW_COMMENT_TEXT:\r\n            return {...state, newComm: action.newComm}\r\n        case ADD_COMMENT:\r\n            return {\r\n                ...state, comments: [...state.comments, {\r\n                    text: action.comment,\r\n                    id: v1(),\r\n                    postId: v1()\r\n                }]\r\n            }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}","import {combineReducers, createStore, EmptyObject, Store} from \"redux\";\r\nimport {\r\n    addPostActionType,\r\n    changeLikesCountActionType,\r\n    filterPostsActionType,\r\n    postsPageType,\r\n    postsReducer\r\n} from \"./postsReducer\";\r\nimport {changeShareStoryTextActionType, shareStoryPageType, shareStoryReducer} from \"./shareStoryReducer\";\r\nimport {dialogsPageType, dialogsReducer} from \"./dialogsReducer\";\r\nimport {sidebarReducer, sideBarType} from \"./sidebarReducer\";\r\nimport {\r\n    addCommentActionType,\r\n    changeNewCommentTextActionType,\r\n    ProfilePageType,\r\n    profileReducer\r\n} from \"./profileReducer\";\r\n\r\n//types\r\nexport type stateType = {\r\n    postsPage: postsPageType\r\n    dialogsPage: dialogsPageType\r\n    shareStoryPage: shareStoryPageType\r\n    sideBar: sideBarType\r\n    profilePage: ProfilePageType\r\n}\r\nexport type StoreType = Store<EmptyObject & {\r\n    postsPage: postsPageType;\r\n    profilePage: ProfilePageType;\r\n    shareStoryPage: shareStoryPageType;\r\n    dialogsPage: dialogsPageType;\r\n    sideBar: sideBarType\r\n}, actionsType>\r\nexport type actionsType = addPostActionType | changeLikesCountActionType |\r\n    changeShareStoryTextActionType | changeNewCommentTextActionType |\r\n    addCommentActionType | filterPostsActionType\r\n\r\nconst reducers = combineReducers({\r\n    postsPage: postsReducer,\r\n    profilePage: profileReducer,\r\n    shareStoryPage: shareStoryReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sideBar: sidebarReducer,\r\n})\r\n\r\nexport const store = createStore(reducers)","import React from 'react';\nimport styles from './Header.module.css';\nimport {wayType} from \"../../App\";\n\ntype HeaderPropsType = {\n    setWay: (value: wayType) => void\n}\n\nexport const Header: React.FC<HeaderPropsType> = (props) => {\n    return (\n        <div id={styles.header}>\n            <div id={styles.textContainer}>\n                <h4>Внимание!</h4>\n                <p>\n                    На данном сайте присутствует ненормативная\n                    лексика, которая может оскорбить ваши чувства. Здесь\n                    анонимы делятся исключительно своим мнением, совпадения\n                    с реальными людьми/компаниями случайны (иногда).\n                </p>\n                <p>\n                    Нажимая на изображение, вы подтверждаете, что вам есть 18\n                    лет, и вы принимаете всю ответственность за\n                    прочитанное на себя.\n                </p>\n                <button id={styles.enterBtn}\n                        onClick={() => props.setWay(1)}>\n                    <img id={styles.imgBtn}\n                         src='https://share.cdn.viber.com/pg_download?id=0-04-05-a50d6229fb2be5d62ec2f08878bf7ee2e7ca1cbb7bdf45439bc1499398711fee&filetype=jpg&type=icon'\n                         alt='No image'/>\n                </button>\n            </div>\n        </div>\n    )\n        ;\n}\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport styles from \"./Nava.module.css\";\n\nconst NavaSecret = () => {\n\n    return (\n        <div id={styles.nava}>\n            <div className={styles.button}>\n                <NavLink activeClassName={styles.active} to='/'>\n                    <img src='https://otvet.imgsmail.ru/download/82092830_8fae13c057d409cc317bcda273f470e5_800.jpg'\n                         alt='No image'/>\n                </NavLink>\n            </div>\n            <div className={styles.button}>\n                <NavLink activeClassName={styles.active} to='/share'>\n                    SHARE\n                </NavLink>\n            </div>\n            <div className={styles.button}>\n                <NavLink activeClassName={styles.active} to='/best'>\n                    BEST\n                </NavLink>\n            </div>\n            <div className={styles.button}>\n                <NavLink activeClassName={styles.active}  to='/profile'>\n                    PROFILE\n                </NavLink>\n            </div>\n            <div className={styles.button}>\n                <NavLink activeClassName={styles.active}  to='/dialogs'>\n                    DIALOGS\n                </NavLink>\n            </div>\n            <div className={styles.button}></div>\n            <div className={styles.button}></div>\n            <div className={styles.button}>\n                <NavLink className={styles.search}\n                        activeClassName={styles.active}\n                         to=''>\n                    SEARCH\n                </NavLink>\n                <div className={styles.searchBar}></div>\n            </div>\n        </div>\n    );\n}\nexport const Nava = React.memo(NavaSecret)","import React from \"react\";\nimport styles from './LikesCount.module.css'\n\n//types\ntype LikesCountPropsType = {\n    likesCount: number\n    changeLikesCount: (value: boolean) => void\n}\n\nconst LikesCountSecret: React.FC<LikesCountPropsType> = (props) => {\n\n    //return\n    return (\n        <div className={styles.like}>\n            <button className={styles.btn} onClick={() => props.changeLikesCount(false)}>-</button>\n            <button>{props.likesCount}</button>\n            <button className={styles.btn} onClick={() => props.changeLikesCount(true)}>+</button>\n        </div>\n    )\n}\nexport const LikesCount = React.memo(LikesCountSecret)\n","import React from \"react\";\r\nimport {actionsType} from \"../../../../../redux/redux_store\";\r\nimport {changeLikesCountActionCreator} from \"../../../../../redux/postsReducer\";\r\nimport {LikesCount} from \"./LikesCount\";\r\n\r\n//types\r\ntype LikesCountPropsType = {\r\n    likesCount: number\r\n    postId: string\r\n    dispatch: (action: actionsType) => void\r\n}\r\n\r\nconst LikesCountContainerSecret: React.FC<LikesCountPropsType> = (props) => {\r\n\r\n    //callbacks\r\n    const changeLikesCount = (change: boolean) => {\r\n        props.dispatch(changeLikesCountActionCreator(change, props.postId))\r\n    }\r\n\r\n    //return\r\n    return <LikesCount likesCount={props.likesCount} changeLikesCount={changeLikesCount}/>\r\n}\r\nexport const LikesCountContainer = React.memo(LikesCountContainerSecret)","import React from \"react\";\nimport styles from './Post.module.css';\nimport {actionsType} from \"../../../../redux/redux_store\";\nimport {LikesCountContainer} from \"./LikesCount/LIkesCountContainer\";\nimport {PostType} from \"../../../../redux/postsReducer\";\n\n//types\nexport type PostPropsType = {\n    postInfo: PostType\n    dispatch: (action: actionsType) => void\n}\n\n//components\nconst PostSecret: React.FC<PostPropsType> = (props) => {\n\n    //return\n    return (\n        <div className={styles.post}>\n            <div className={styles.text}>\n                <div className={styles.postText}>{props.postInfo.postText}</div>\n                <div className={styles.postDate}>{props.postInfo.postDate}</div>\n                <LikesCountContainer likesCount={props.postInfo.postLikes}\n                                     dispatch={props.dispatch}\n                                     postId={props.postInfo.postId}/>\n            </div>\n            <div className={styles.image}>\n                <img src={props.postInfo.postPhoto} alt='not available'/>\n            </div>\n        </div>\n    );\n}\nexport const Post = React.memo(PostSecret)","import React from \"react\";\r\nimport {StoreType} from \"./redux_store\";\r\n\r\nexport const StoreContext = React.createContext({} as StoreType)","import React, {ChangeEvent} from 'react';\nimport classes from './Posts.module.css';\nimport {Post} from \"./Post/Post\";\nimport {filterPostsActionCreator} from \"../../../redux/postsReducer\";\nimport {StoreContext} from \"../../../redux/StoreContext\";\n\n//components\nconst PostsSecret: React.FC = () => {\n\n    //return\n    return (\n        <StoreContext.Consumer>\n            {\n                (store) => {\n                    const onChangeHandler = (event: ChangeEvent<HTMLSelectElement>) => {\n                        store.dispatch(filterPostsActionCreator(event.currentTarget.value))\n                    }\n                    return (\n                        <div>\n                            Sorted by\n                            <select value={store.getState().postsPage.filter} onChange={onChangeHandler}>\n                                <option value={'date'}>date</option>\n                                <option value={'rate'}>rate</option>\n                                <option value={'reverse rate'}>reverse rate</option>\n                            </select>\n                            <div id={classes.posts}>\n                                {store.getState().postsPage.posts.map((post) => {\n                                    return (\n                                        <div key={post.postId}>\n                                            <Post postInfo={post}\n                                                  dispatch={store.dispatch}/>\n                                        </div>\n                                    )\n                                })}\n                            </div>\n                        </div>)\n                }\n            }</StoreContext.Consumer>\n    );\n}\nexport const Posts = React.memo(PostsSecret)","import React from \"react\";\nimport styles from \"../Sidebar.module.css\";\n\nexport type postType = {\n    text: string\n    id: string\n}\n\ntype BestPostsPropsType = {\n    bestPosts: Array<postType>\n}\n\nconst BestPostsSecret: React.FC<BestPostsPropsType> = (props) => {\n    return (\n        <div className={styles.posts}>\n            {props.bestPosts.map(bestPost => {\n                return <div key={bestPost.id}\n                            className={styles.post}>{bestPost.text}</div>\n            })}\n        </div>\n    );\n}\nexport const BestPosts = React.memo(BestPostsSecret)","import React from 'react'\nimport {tagType} from \"../../../../../redux/sidebarReducer\";\n\ntype TagPropsType = tagType\nconst TagSecret: React.FC<TagPropsType> = (props) => {\n\n    //styles\n    const tagStyle = {\n        fontSize: props.priority\n    }\n\n    //return\n    return (\n        <span style={tagStyle}>{props.name} </span>\n    );\n}\nexport const Tag = React.memo(TagSecret)","import styles from \"../Sidebar.module.css\";\nimport React from \"react\";\nimport {Tag} from \"./Tag/Tag\";\nimport {tagType} from \"../../../../redux/sidebarReducer\";\n\ntype TagsPropsType = {\n    tags: Array<tagType>\n}\n\n const TagsSecret: React.FC<TagsPropsType> = (props) => {\n\n    return (\n        <div>\n            {props.tags.map((tag) => <Tag name={tag.name} priority={tag.priority}/>)}\n        </div>\n    );\n}\nexport const Tags = React.memo(TagsSecret)","import React from 'react';\nimport styles from './Sidebar.module.css';\nimport {BestPosts} from \"./BestPosts/BestPosts\";\nimport {Tags} from \"./Tags/Tags\";\nimport {sideBarType} from \"../../../redux/sidebarReducer\";\n\ntype SidebarPropsType = {\n    state: sideBarType\n}\n\nconst SidebarSecret: React.FC<SidebarPropsType> = (props) => {\n    return (\n        <div id={styles.sidebar}>\n            <BestPosts bestPosts={props.state.bestPosts}/>\n            <Tags tags={props.state.tags}/>\n        </div>\n    );\n}\nexport const Sidebar = React.memo(SidebarSecret)","import React from \"react\";\nimport styles from \"./Chat.module.css\";\nimport {ChatType} from \"../../../../redux/dialogsReducer\";\n\n//types\ntype ChatPropsType = {\n    messages: Array<ChatType>\n}\n\n//components\nconst ChatSecret: React.FC<ChatPropsType> = (props) => {\n\n    //callbacks\n    const mappedMessages = props.messages.map((m) => {\n        return (\n            <div className={(m.author === 'you') ? styles.you : styles.notYou}\n                 key={m.id}>\n                {m.author === 'notYou' ?\n                    <img src={'https://glennmiller.pythonanywhere.com/static/admin_ava.jpg'}/> : false}\n                <div>\n                    <div className={styles.author}>\n                        {m.author}\n                    </div>\n                    <div className={styles.message}>\n                        {m.message}\n                    </div>\n                </div>\n                {m.author === 'you' ?\n                    <img src={'https://glennmiller.pythonanywhere.com/static/admin_ava.jpg'}/> : false}\n\n            </div>\n        );\n    });\n\n    //return\n    return (\n        <div>\n            {mappedMessages}\n        </div>\n    );\n}\nexport const Chat = React.memo(ChatSecret)","import React from \"react\";\nimport styles from \"../Dialogs.module.css\";\nimport {NavLink} from \"react-router-dom\";\n\n//types\nexport type OpenDialogPropsType = {\n    id: string\n    name: string\n}\n\n//components\nconst OpenDialogSecret: React.FC<OpenDialogPropsType> = (props) => {\n    return (\n        <div className={styles.openDialog}>\n            <NavLink to={`/dialogs/${props.id}`}>\n                {props.name}\n            </NavLink>\n        </div>\n    )\n}\nexport const OpenDialog = React.memo(OpenDialogSecret)","import React, {useState} from 'react';\nimport styles from './Dialogs.module.css'\nimport {Chat} from \"./Chat/Chat\";\nimport {OpenDialog} from \"./OpenDialog/OpenDialog\";\nimport {ChatType, dialogsPageType} from \"../../../redux/dialogsReducer\";\n\n//types\ntype FilterType = 'you' | 'notYou' | 'all'\ntype DialogsPropsType = {\n    state: dialogsPageType\n}\n\n//callbacks\nconst filterMessages = (messages: Array<ChatType>, filter: FilterType): Array<ChatType> => {\n    if (filter === 'all') {\n        return messages;\n    } else {\n        return messages.filter((m) => {\n            return m.author === filter;\n        });\n    }\n}\n\n//components\nconst DialogsSecret: React.FC<DialogsPropsType> = (props) => {\n\n    //initial states\n    const [filter, setFilter] = useState<FilterType>('all');\n\n    //callbacks\n    const setNotYou = () => {\n        setFilter('notYou');\n    }\n    const setYou = () => {\n        setFilter('you');\n    }\n    const setAll = () => {\n        setFilter('all');\n    }\n\n    //filter\n    const filteredMessages = filterMessages(props.state.chat, filter);\n\n    //return\n    return (\n        <div className={styles.container}>\n            <div className={styles.filter}>\n                <div onClick={setYou}>you</div>\n                <div onClick={setNotYou}>notYou</div>\n                <div onClick={setAll}>all</div>\n            </div>\n            <div className={styles.openDialogs}>\n                {props.state.dialogs.map((dialog) => {\n                    return (\n                        <OpenDialog key={dialog.id} id={dialog.id} name={dialog.name}/>\n                    );\n                })}\n            </div>\n            <div className={styles.dialogs}>\n                <Chat messages={filteredMessages}/>\n            </div>\n        </div>\n    );\n}\nexport const Dialogs = React.memo(DialogsSecret)","import React from 'react';\nimport styles from './Profile.module.css';\n\nconst BestSecret = () => {\n    return (\n        <div>Best</div>\n    )\n}\nexport const Best = React.memo(BestSecret)","import React, {ChangeEvent, LegacyRef, useState} from 'react';\nimport styles from './ShareStory.module.css';\nimport {changeShareStoryTextActionCreator, shareStoryPageType} from \"../../../redux/shareStoryReducer\";\nimport {addPostActionCreator} from \"../../../redux/postsReducer\";\nimport {actionsType} from \"../../../redux/redux_store\";\n\ntype ShareStoryPropsType = {\n    dispatch: (action: actionsType) => void\n    state: shareStoryPageType\n}\n\n//components\nconst ShareStorySecret: React.FC<ShareStoryPropsType> = (props) => {\n\n    //initial states\n    const [error, setError] = useState<boolean>(false)\n\n    const ref: LegacyRef<HTMLTextAreaElement> | undefined = React.createRef()\n\n    //callbacks\n    const onClickCallback = () => {\n        props.dispatch(addPostActionCreator(ref.current ? ref.current.value : ''))\n        props.dispatch(changeShareStoryTextActionCreator(''))\n    }\n\n    const onChangeHandler = (event: ChangeEvent<HTMLTextAreaElement>) => {\n        props.dispatch(changeShareStoryTextActionCreator(event.currentTarget.value))\n    }\n\n    //return\n    return (\n        <div>\n            <textarea placeholder={'Share your story with us'}\n                      value={props.state.storyText}\n                      onChange={onChangeHandler}\n                      maxLength={1000}\n                      ref={ref}\n                      className={styles.txt}></textarea>\n            <button onClick={onClickCallback}\n                    className={styles.btn}>Send\n            </button>\n            {error && <div className={styles.error}>error</div>}\n        </div>\n    )\n}\nexport const ShareStory = React.memo(ShareStorySecret)","import {commentType} from \"../../../../redux/profileReducer\";\r\nimport {actionsType} from \"../../../../redux/redux_store\";\r\nimport React from \"react\";\r\n\r\nexport type CommentPropsType = {\r\n    state: commentType\r\n}\r\nconst CommentSecret: React.FC<CommentPropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <div>{props.state.postId}</div>\r\n            <div>{props.state.text}</div>\r\n            <div>{props.state.id}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Comment = React.memo(CommentSecret)","import React, {ChangeEvent} from 'react';\nimport {ProfilePageType} from \"../../../redux/profileReducer\";\nimport {Comment} from \"./Comment/Comment\";\n\ntype ProfilePropsType = {\n    onChangeCallback: (event: ChangeEvent<HTMLInputElement>) => void\n    onClickCallback: () => void\n    state: ProfilePageType\n}\n\nconst ProfileSecret: React.FC<ProfilePropsType> = (props) => {\n    return (\n        <div>\n            Commentaries\n            {props.state.comments.map(com => <Comment state={com}/>)}\n            <div>\n                <input onChange={props.onChangeCallback} value={props.state.newComm}/> new comment<hr/>\n                <button onClick={props.onClickCallback}>post</button>\n            </div>\n        </div>\n    )\n}\nexport const Profile = React.memo(ProfileSecret)\n\n","import React, {ChangeEvent} from 'react';\nimport {\n    addCommentActionCreator,\n    changeNewCommentTextActionCreator,\n} from \"../../../redux/profileReducer\";\nimport {Profile} from \"./Profile\";\nimport {StoreContext} from \"../../../redux/StoreContext\";\n\n/*\ntype ProfileContainerPropsType = {\n    state: ProfilePageType\n    dispatch: (action: actionsType) => void\n}*/\n\nconst ProfileContainerSecret: React.FC = () => {\n    return (\n        <StoreContext.Consumer>\n            {\n                (store) => {\n                    const onChangeCallback = (event: ChangeEvent<HTMLInputElement>) => {\n                        store.dispatch(changeNewCommentTextActionCreator(event.currentTarget.value))\n                    }\n                    const onClickCallback = () => {\n                        store.dispatch(addCommentActionCreator(store.getState().profilePage.newComm))\n                        store.dispatch(changeNewCommentTextActionCreator(''))\n                    }\n\n                    return <Profile onChangeCallback={onChangeCallback}\n                             onClickCallback={onClickCallback}\n                             state={store.getState().profilePage}/>\n            }\n            }\n        </StoreContext.Consumer>\n    )\n}\nexport const ProfileContainer = React.memo(ProfileContainerSecret)\n\n","import React from 'react';\nimport styles from './Content.module.css';\nimport {Nava} from \"./Nava/Nava\";\nimport {Posts} from \"./Posts/Posts\";\nimport {Sidebar} from \"./Sidebar/Sidebar\";\nimport {Dialogs} from \"./Dialogs/Dialogs\";\nimport {Redirect, Route} from 'react-router-dom';\nimport {Best} from \"./Best/Best\";\nimport {ShareStory} from \"./ShareStory/ShareStory\";\nimport {ProfileContainer} from \"./Profile/ProfileContainer\";\nimport {actionsType, stateType} from \"../../redux/redux_store\";\n\n//types\ntype ContentPropsType = {\n    state: stateType\n    dispatch: (action: actionsType) => void\n}\n\n//components\nexport const Content: React.FC<ContentPropsType> = (props) => {\n\n    return (\n        <div id={styles.content}>\n            <div id={styles.nava}><Nava/></div>\n            <div id={styles.contentContent}>\n                <div id={styles.general}>\n                    <Route path={'/'} exact render={() => <Redirect to={'/main'}/>}/>\n                    <Route path='/main'\n                           render={() => <Posts/>}/>\n                    <Route path='/best' component={Best}/>\n                    <Route path='/share' render={() => <ShareStory state={props.state.shareStoryPage}\n                                                                   dispatch={props.dispatch}/>}/>\n                    <Route path='/profile' render={() => <ProfileContainer/>}/>\n                    <Route path='/dialogs'\n                           render={() => <Dialogs state={props.state.dialogsPage}/>}/>\n                </div>\n            </div>\n            <div id={styles.sidebar}>\n                <div id={styles.general}>\n                    <Sidebar state={props.state.sideBar}/></div>\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport classes from './Footer.module.css';\n\n\nconst FooterSecret = () => {\n    return (\n        <div id={classes.footer}>\n            <ul>\n                <li><NavLink to='/'>main</NavLink></li>\n                <li><NavLink to='/best'>best</NavLink></li>\n                <li><NavLink to='/profile'>profile</NavLink></li>\n                <li><NavLink to='/share'>share</NavLink></li>\n            </ul>\n            <div>\n                <img src='https://podslyshano.com/images/logo.svg' alt='not found'/>\n            </div>\n            <ul>\n                <li><a href={'https://vk.com/racoonister'}>facebook</a></li>\n                <li><a href={'https://vk.com/racoonister'}>twitter</a></li>\n                <li><a href={'https://vk.com/racoonister'}>telegram</a></li>\n                <li><a href={'https://vk.com/racoonister'}>vk</a></li>\n            </ul>\n        </div>\n    );\n}\nexport const Footer = React.memo(FooterSecret)","import React, {useState, memo} from 'react';\nimport './App.css';\nimport {Header} from \"./components/Header/Header\";\nimport {Content} from \"./components/Content/Content\";\nimport {Footer} from \"./components/Footer/Footer\";\nimport {HashRouter} from \"react-router-dom\";\nimport {actionsType, stateType} from \"./redux/redux_store\";\n\n//types\nexport type wayType = 0 | 1\ntype AppPropsType = {\n    state: stateType\n    dispatch: (action: actionsType) => void\n}\n\nfunction AppSecret(props: AppPropsType) {\n    const [way, setWay] = useState<wayType>(1)\n\n    return (\n        <HashRouter>\n            <div id='appWrapper'>\n                {way === 0 ? <Header setWay={setWay}/> :\n                    <>\n                        <Content state={props.state}\n                                 dispatch={props.dispatch}/>\n                        <Footer/>\n                    </>}\n            </div>\n        </HashRouter>\n    );\n}\nconst App = React.memo(AppSecret)\n\nexport default App;\n","import React from 'react';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {store} from './redux/redux_store'\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport {StoreContext} from './redux/StoreContext';\n\nconst renderEntireTree = () => {\n    ReactDOM.render(\n        <React.StrictMode>\n            <StoreContext.Provider value={store}>\n                <App state={store.getState()}\n                     dispatch={store.dispatch.bind(store)}/>\n            </StoreContext.Provider>\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n}\n\nrenderEntireTree();\nstore.subscribe(() => renderEntireTree())\n\n// If you want to start measuring performance in your app, pass a function\n// tlog results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}