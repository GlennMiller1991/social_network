{"version":3,"sources":["components/Content/Nava/Nava.module.css","components/Content/Dialogs/Dialogs.module.css","components/Content/Content.module.css","components/Content/Posts/Post/Post.module.css","components/Content/Sidebar/Sidebar.module.css","components/Header/Header.module.css","components/Content/Dialogs/Chat/Chat.module.css","components/Content/Posts/Post/LikesCount/LikesCount.module.css","components/Content/ShareStory/ShareStory.module.css","components/Footer/Footer.module.css","reportWebVitals.ts","redux/postsReducer.ts","redux/shareStoryReducer.ts","redux/dialogsReducer.ts","redux/sidebarReducer.ts","redux/profileReducer.ts","redux/redux_store.ts","components/Header/Header.tsx","components/Content/Nava/Nava.tsx","components/Content/Sidebar/BestPosts/BestPosts.tsx","components/Content/Sidebar/Tags/Tag/Tag.tsx","components/Content/Sidebar/Tags/Tags.tsx","components/Content/Sidebar/Sidebar.tsx","components/Content/Best/Best.tsx","components/Content/Profile/Comment/Comment.tsx","components/Content/Profile/Profile.tsx","redux/StoreContext.ts","components/Content/Profile/ProfileContainer.tsx","components/Content/Posts/Post/LikesCount/LikesCount.tsx","components/Content/Posts/Post/Post.tsx","components/Content/Posts/Posts.tsx","components/Content/Posts/PostsContainer.tsx","components/Content/Dialogs/Chat/Chat.tsx","components/Content/Dialogs/OpenDialog/OpenDialog.tsx","components/Content/Dialogs/Dialogs.tsx","components/Content/Dialogs/DialogsContainer.tsx","components/Content/ShareStory/ShareStory.tsx","components/Content/ShareStory/ShareStoryContainer.tsx","components/Content/Content.tsx","components/Footer/Footer.tsx","App.tsx","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","CHANGE_LIKES_COUNT","ADD_POST","FILTER","initialState","posts","postText","postPhoto","postDate","postLikes","postId","v1","filter","CHANGE_SHARE_STORY_TEXT","changeShareStoryTextActionCreator","text","type","shareStoryText","storyText","FILTER_MESSAGES","chat","id","author","message","dialogs","name","tags","priority","bestPosts","CHANGE_NEW_COMMENT_TEXT","ADD_COMMENT","changeNewCommentTextActionCreator","newComm","comments","answer","reducers","combineReducers","postsPage","state","action","obj","find","post","value","postMessage","trim","newPost","Date","getDate","getMonth","getFullYear","push","postsForRender","filterValue","sort","postA","postB","profilePage","comment","shareStoryPage","dialogsPage","mes","sideBar","store","createStore","Header","props","styles","header","textContainer","enterBtn","onClick","setWay","imgBtn","src","alt","NavaSecret","nava","className","button","activeClassName","active","to","search","searchBar","Nava","React","memo","BestPostsSecret","map","bestPost","BestPosts","TagSecret","tagStyle","fontSize","style","Tag","TagsSecret","tag","Tags","SidebarSecret","sidebar","Sidebar","BestSecret","Best","CommentSecret","Comment","ProfileSecret","com","onChange","onChangeCallback","onClickCallback","Profile","StoreContext","createContext","ProfileContainerSecret","Consumer","event","dispatch","currentTarget","getState","ProfileContainer","LikesCountSecret","like","btn","changeLikesCount","likesCount","LikesCount","PostSecret","postInfo","image","Post","Posts","onChangeFilterHandler","classes","PostsContainer","change","changeLikesCountActionCreator","ChatSecret","mappedMessages","messages","m","you","notYou","Chat","OpenDialogSecret","openDialog","OpenDialog","DialogsSecret","container","setFilter","openDialogs","dialog","Dialogs","DialogsContainer","ShareStorySecret","ref","createRef","placeholder","maxLength","txt","current","ShareStory","ShareStoryContainer","formText","Content","content","contentContent","general","path","exact","render","component","FooterSecret","footer","href","Footer","AppSecret","useState","way","App","renderEntireTree","ReactDOM","StrictMode","Provider","bind","document","getElementById","subscribe"],"mappings":"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","file":"static/js/main.b6c61c2c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nava\":\"Nava_nava__1Txrr\",\"button\":\"Nava_button__3UGRg\",\"active\":\"Nava_active__1OPDb\",\"searchBar\":\"Nava_searchBar__2s9wB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Dialogs_container__2sluC\",\"filter\":\"Dialogs_filter__3BzKz\",\"openDialogs\":\"Dialogs_openDialogs__1BPAE\",\"dialogs\":\"Dialogs_dialogs__15U5l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Content_content__EVS44\",\"nava\":\"Content_nava__3MGrF\",\"contentContent\":\"Content_contentContent__3uM9c\",\"sidebar\":\"Content_sidebar__1Gjnn\",\"general\":\"Content_general__3V4UQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__22c__\",\"text\":\"Post_text__1H0C7\",\"image\":\"Post_image__7k2jT\",\"postText\":\"Post_postText__2SCZt\",\"postAuthor\":\"Post_postAuthor__1XwFO\",\"postDate\":\"Post_postDate__3-iXS\",\"postLikes\":\"Post_postLikes__3I43s\",\"postRate\":\"Post_postRate__3OpKe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar\":\"Sidebar_sidebar__1zX0I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2fUTx\",\"textContainer\":\"Header_textContainer__1X9wE\",\"enterBtn\":\"Header_enterBtn__3RCTD\",\"imgBtn\":\"Header_imgBtn__kMlQ0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"you\":\"Chat_you__Q3Ix2\",\"notYou\":\"Chat_notYou__3d_-V\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"like\":\"LikesCount_like__suXhL\",\"btn\":\"LikesCount_btn__2n-I1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"txt\":\"ShareStory_txt__1JeGs\",\"btn\":\"ShareStory_btn__6N4t5\",\"error\":\"ShareStory_error__1FXdd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__2HV5Q\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {v1} from \"uuid\";\r\nimport {actionsType} from \"./redux_store\";\r\n\r\n//constants\r\nconst CHANGE_LIKES_COUNT = \"CHANGE-LIKES-COUNT\";\r\nconst ADD_POST = \"ADD-POST\"\r\nconst FILTER = 'FILTER'\r\n\r\n//actions types\r\nexport type changeLikesCountActionType = ReturnType<typeof changeLikesCountActionCreator>\r\nexport type addPostActionType = ReturnType<typeof addPostActionCreator>\r\nexport type filterPostsActionType = ReturnType<typeof filterPostsActionCreator>\r\n\r\n//types\r\nexport type PostType = {\r\n    postText: string\r\n    postPhoto: string\r\n    postDate: string\r\n    postLikes: number\r\n    postId: string\r\n}\r\nexport type postsPageType = {\r\n    posts: Array<PostType>\r\n    filter: string\r\n}\r\n\r\n//action creators\r\nexport const changeLikesCountActionCreator = (change: boolean, postId: string) => {\r\n    return {type: CHANGE_LIKES_COUNT, postId: postId, value: change} as const\r\n}\r\nexport const addPostActionCreator = (value: string) => {\r\n    return {type: ADD_POST, postMessage: value} as const\r\n}\r\nexport const filterPostsActionCreator = (filterValue: string) => {\r\n    return {\r\n        type: FILTER,\r\n        filterValue: filterValue\r\n    } as const\r\n\r\n}\r\n\r\nconst initialState: postsPageType = {\r\n    posts: [\r\n        {\r\n            postText: 'Is there anybody going to listen to my story' +\r\n                '? All about girl who came to stay. She is a kind of girl you' +\r\n                'want so much, it makes you sorry, still you don\\'t regret a single day',\r\n            postPhoto: 'https://www.culturesonar.com/wp-content/uploads/2017/08/beatles-with-a-girl-getty-600x400.jpg',\r\n            postDate: '07.23.2021',\r\n            postLikes: -1,\r\n            postId: v1(),\r\n        },\r\n        {\r\n            postText: 'Когда в нашем городе только зарождался первый частный' +\r\n                ' приют для животных, я пошла туда волонтёром. Была хорошо знакома' +\r\n                ' с организаторами этого дела, видела, как они стараются ради' +\r\n                ' хвостатых. Тогда они ещё ездили на скромных машинах и работали' +\r\n                ' на основной работе.\\n' +\r\n                'Прошло уже почти десять лет. У тех барышень свои частные коттеджи' +\r\n                ' в элитном районе города, дорогие машины и прочие блага. ' +\r\n                'И всё это притом, что они уже лет пять не работают нигде, кроме' +\r\n                ' как безвозмездно руководят приютом. Хм.',\r\n            postPhoto: 'https://www.culturesonar.com/wp-content/uploads/2017/08/beatles-with-a-girl-getty-600x400.jpg',\r\n            postDate: '06.23.2021',\r\n            postLikes: 2,\r\n            postId: v1()\r\n        },\r\n        {\r\n            postText: 'Хм.',\r\n            postPhoto: 'https://www.culturesonar.com/wp-content/uploads/2017/08/beatles-with-a-girl-getty-600x400.jpg',\r\n            postDate: '08.23.2021',\r\n            postLikes: 1,\r\n            postId: v1()\r\n        }],\r\n    filter: 'date'\r\n}\r\n\r\nexport const postsReducer = (state: postsPageType = initialState, action: actionsType): postsPageType => {\r\n    switch (action.type) {\r\n        case CHANGE_LIKES_COUNT:\r\n            const obj = state.posts.find((post) => post.postId === action.postId)\r\n            if (obj) {\r\n                action.value ? obj.postLikes++ : obj.postLikes--\r\n            }\r\n            return state\r\n        case ADD_POST:\r\n            if (action.postMessage.trim()) {\r\n                const newPost: PostType = {\r\n                    postText: action.postMessage,\r\n                    postPhoto: 'https://helo',\r\n                    postDate: `${new Date().getDate()}.${new Date().getMonth()}.${new Date().getFullYear()}}`,\r\n                    postLikes: 0,\r\n                    postId: v1()\r\n                }\r\n                state.posts.push(newPost)\r\n            }\r\n            return state\r\n        case FILTER:\r\n            const postsForRender = state.posts\r\n            switch (action.filterValue) {\r\n                case \"rate\":\r\n                    postsForRender.sort((postA, postB) => {\r\n                        return postA.postLikes > postB.postLikes ? -1 : 1\r\n                    })\r\n                    return {posts: postsForRender, filter: 'rate'}\r\n                case \"reverse rate\":\r\n                    postsForRender.sort((postA, postB) => {\r\n                        return postA.postLikes > postB.postLikes ? 1 : -1\r\n                    })\r\n                    return {posts: postsForRender, filter: 'reverse rate'}\r\n                case 'date':\r\n                default:\r\n                    return {posts: postsForRender, filter: 'date'}\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import {actionsType} from \"./redux_store\";\r\n\r\n//constants\r\nconst CHANGE_SHARE_STORY_TEXT = 'CHANGE-SHARE-STORY-TEXT'\r\n\r\n//actions creators\r\nexport const changeShareStoryTextActionCreator = (text: string) => {\r\n    return {\r\n        type: CHANGE_SHARE_STORY_TEXT,\r\n        shareStoryText: text\r\n    } as const\r\n}\r\n\r\n//actions types\r\nexport type changeShareStoryTextActionType = ReturnType<typeof changeShareStoryTextActionCreator>\r\n\r\n//data\r\nconst initialState = {\r\n    storyText: ''\r\n}\r\n\r\n//types\r\nexport type shareStoryPageType = {\r\n    storyText: string\r\n}\r\n\r\n//reducer\r\nexport const shareStoryReducer = (state: shareStoryPageType = initialState, action: actionsType) => {\r\n    switch(action.type) {\r\n        case CHANGE_SHARE_STORY_TEXT:\r\n            state.storyText = action.shareStoryText\r\n            return state\r\n        default:\r\n            return state\r\n    }\r\n}","import {v1} from \"uuid\";\r\nimport {actionsType} from \"./redux_store\";\r\n\r\n//constants\r\nexport const FILTER_MESSAGES = 'FILTER-MESSAGES'\r\n\r\n//types\r\nexport type ChatType = {\r\n    id: string\r\n    author: 'you' | 'notYou'\r\n    message: string\r\n}\r\nexport type OpenDialogType = {\r\n    id: string\r\n    name: string\r\n}\r\nexport type dialogsPageType = {\r\n    chat: Array<ChatType>\r\n    dialogs: Array<OpenDialogType>\r\n    filter: string\r\n}\r\n\r\n//actions types\r\nexport type filterMessagesActionType = ReturnType<typeof filterMessagesActionCreator>\r\n\r\n//action creators\r\nexport const filterMessagesActionCreator = (value: string) => {\r\n    return {\r\n        type: FILTER_MESSAGES,\r\n        filterValue: value\r\n    } as const\r\n}\r\n\r\nconst initialState: dialogsPageType = {\r\n    chat: [\r\n        {\r\n            id: v1(),\r\n            author: 'notYou',\r\n            message: 'How are you'\r\n        },\r\n        {\r\n            id: v1(),\r\n            author: 'you',\r\n            message: 'How are you'\r\n        },\r\n        {\r\n            id: v1(),\r\n            author: 'notYou',\r\n            message: 'How are you'\r\n        },\r\n\r\n    ],\r\n    dialogs: [\r\n        {name: 'Katya', id: v1()},\r\n        {name: 'Dasha', id: v1()},\r\n        {name: 'Anna', id: v1()},\r\n        {name: 'Viktor', id: v1()},\r\n        {name: 'Andrey', id: v1()},\r\n    ],\r\n    filter: 'all'\r\n}\r\n\r\nexport const dialogsReducer = (state: dialogsPageType = initialState, action: actionsType): dialogsPageType => {\r\n    switch (action.type) {\r\n        case FILTER_MESSAGES:\r\n            switch (action.filterValue) {\r\n                case 'all':\r\n                    return state\r\n                case 'you' || 'notYou':\r\n                    return {\r\n                        ...state,\r\n                        chat: state.chat.filter(mes => mes.author === action.filterValue),\r\n                        filter: action.filterValue\r\n                    }\r\n                default:\r\n                    return state\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import {v1} from \"uuid\";\r\nimport {actionsType} from \"./redux_store\";\r\n\r\n\r\n//types\r\nexport type bestPostType = {\r\n    text: string\r\n    id: string\r\n}\r\nexport type tagType = {\r\n    name: string\r\n    priority: number\r\n}\r\nexport type sideBarType = {\r\n    tags: Array<tagType>\r\n    bestPosts: Array<bestPostType>\r\n}\r\n\r\n//data\r\nconst initialState = {\r\n    tags: [\r\n        {\r\n            name: 'Family',\r\n            priority: 9,\r\n        },\r\n        {\r\n            name: 'Strange',\r\n            priority: 16,\r\n        },\r\n        {\r\n            name: 'Love',\r\n            priority: 14,\r\n        },\r\n        {\r\n            name: 'Pizdec',\r\n            priority: 20,\r\n        },\r\n        {\r\n            name: 'Scary',\r\n            priority: 13,\r\n        },\r\n        {\r\n            name: 'Childhood',\r\n            priority: 12,\r\n        },\r\n        {\r\n            name: 'Work',\r\n            priority: 22,\r\n        },\r\n    ],\r\n    bestPosts: [\r\n        {text: 'Best post', id: v1()},\r\n        {text: 'Best post', id: v1()},\r\n        {text: 'Best post', id: v1()},\r\n        {text: 'Best post', id: v1()},\r\n        {text: 'Best post', id: v1()},\r\n        {text: 'Best post', id: v1()},\r\n    ],\r\n}\r\n\r\n//reducer\r\nexport const sidebarReducer = (state: sideBarType = initialState, action: actionsType): sideBarType  => {\r\n    switch (action.type) {\r\n        default:\r\n            return state\r\n    }\r\n}","import {v1} from \"uuid\";\r\nimport {actionsType} from \"./redux_store\";\r\n\r\n//constants\r\nconst CHANGE_NEW_COMMENT_TEXT = 'CHANGE-NEW-COMMENT-TEXT'\r\nconst ADD_COMMENT = 'ADD-COMMENT'\r\n\r\n//action creators\r\nexport const changeNewCommentTextActionCreator = (newComm: string) => {\r\n    return {\r\n        type: CHANGE_NEW_COMMENT_TEXT,\r\n        newComm: newComm\r\n    } as const\r\n}\r\nexport const addCommentActionCreator = (text: string) => {\r\n    return {\r\n        type: ADD_COMMENT,\r\n        comment: text\r\n    } as const\r\n}\r\n\r\n//types\r\nexport type commentType = {\r\n    id: string\r\n    postId: string\r\n    text: string\r\n    answer: string\r\n}\r\nexport type ProfilePageType = {\r\n    comments: commentType[]\r\n    newComm: string\r\n}\r\n\r\n//actions types\r\nexport type addCommentActionType = ReturnType<typeof addCommentActionCreator>\r\nexport type changeNewCommentTextActionType = ReturnType<typeof changeNewCommentTextActionCreator>\r\n\r\n//data\r\nconst comments: commentType[] = [\r\n    {\r\n        id: v1(),\r\n        postId: v1(),\r\n        text: 'hello',\r\n        answer: v1()\r\n    },\r\n    {\r\n        id: v1(),\r\n        postId: v1(),\r\n        text: 'hello',\r\n        answer: v1()\r\n    },\r\n    {\r\n        id: v1(),\r\n        postId: v1(),\r\n        text: 'hello',\r\n        answer: v1()\r\n    }\r\n]\r\nconst initialState = {\r\n    comments: comments,\r\n    newComm: ''\r\n}\r\n\r\n//reducer\r\nexport const profileReducer = (state:ProfilePageType = initialState, action: actionsType) => {\r\n    switch (action.type) {\r\n        case CHANGE_NEW_COMMENT_TEXT:\r\n            return {...state, newComm: action.newComm}\r\n        case ADD_COMMENT:\r\n            return {\r\n                ...state, comments: [...state.comments, {\r\n                    text: action.comment,\r\n                    id: v1(),\r\n                    postId: v1()\r\n                }]\r\n            }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}","import {combineReducers, createStore, EmptyObject, Store} from \"redux\";\r\nimport {\r\n    addPostActionType,\r\n    changeLikesCountActionType,\r\n    filterPostsActionType,\r\n    postsPageType,\r\n    postsReducer\r\n} from \"./postsReducer\";\r\nimport {changeShareStoryTextActionType, shareStoryPageType, shareStoryReducer} from \"./shareStoryReducer\";\r\nimport {dialogsPageType, dialogsReducer, filterMessagesActionType} from \"./dialogsReducer\";\r\nimport {sidebarReducer, sideBarType} from \"./sidebarReducer\";\r\nimport {\r\n    addCommentActionType,\r\n    changeNewCommentTextActionType,\r\n    ProfilePageType,\r\n    profileReducer\r\n} from \"./profileReducer\";\r\n\r\n//types\r\nexport type stateType = {\r\n    postsPage: postsPageType\r\n    dialogsPage: dialogsPageType\r\n    shareStoryPage: shareStoryPageType\r\n    sideBar: sideBarType\r\n    profilePage: ProfilePageType\r\n}\r\nexport type StoreType = Store<EmptyObject & {\r\n    postsPage: postsPageType;\r\n    profilePage: ProfilePageType;\r\n    shareStoryPage: shareStoryPageType;\r\n    dialogsPage: dialogsPageType;\r\n    sideBar: sideBarType\r\n}, actionsType>\r\nexport type actionsType = addPostActionType | changeLikesCountActionType |\r\n    changeShareStoryTextActionType | changeNewCommentTextActionType |\r\n    addCommentActionType | filterPostsActionType | filterMessagesActionType\r\n\r\nconst reducers = combineReducers({\r\n    postsPage: postsReducer,\r\n    profilePage: profileReducer,\r\n    shareStoryPage: shareStoryReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sideBar: sidebarReducer,\r\n})\r\n\r\nexport const store = createStore(reducers)","import React from 'react';\nimport styles from './Header.module.css';\nimport {wayType} from \"../../App\";\n\ntype HeaderPropsType = {\n    setWay: (value: wayType) => void\n}\n\nexport const Header: React.FC<HeaderPropsType> = (props) => {\n    return (\n        <div id={styles.header}>\n            <div id={styles.textContainer}>\n                <h4>Внимание!</h4>\n                <p>\n                    На данном сайте присутствует ненормативная\n                    лексика, которая может оскорбить ваши чувства. Здесь\n                    анонимы делятся исключительно своим мнением, совпадения\n                    с реальными людьми/компаниями случайны (иногда).\n                </p>\n                <p>\n                    Нажимая на изображение, вы подтверждаете, что вам есть 18\n                    лет, и вы принимаете всю ответственность за\n                    прочитанное на себя.\n                </p>\n                <button id={styles.enterBtn}\n                        onClick={() => props.setWay(1)}>\n                    <img id={styles.imgBtn}\n                         src='https://share.cdn.viber.com/pg_download?id=0-04-05-a50d6229fb2be5d62ec2f08878bf7ee2e7ca1cbb7bdf45439bc1499398711fee&filetype=jpg&type=icon'\n                         alt='No image'/>\n                </button>\n            </div>\n        </div>\n    )\n        ;\n}\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport styles from \"./Nava.module.css\";\n\nconst NavaSecret = () => {\n\n    return (\n        <div id={styles.nava}>\n            <div className={styles.button}>\n                <NavLink activeClassName={styles.active} to='/'>\n                    <img src='https://otvet.imgsmail.ru/download/82092830_8fae13c057d409cc317bcda273f470e5_800.jpg'\n                         alt='No image'/>\n                </NavLink>\n            </div>\n            <div className={styles.button}>\n                <NavLink activeClassName={styles.active} to='/share'>\n                    SHARE\n                </NavLink>\n            </div>\n            <div className={styles.button}>\n                <NavLink activeClassName={styles.active} to='/best'>\n                    BEST\n                </NavLink>\n            </div>\n            <div className={styles.button}>\n                <NavLink activeClassName={styles.active}  to='/profile'>\n                    PROFILE\n                </NavLink>\n            </div>\n            <div className={styles.button}>\n                <NavLink activeClassName={styles.active}  to='/dialogs'>\n                    DIALOGS\n                </NavLink>\n            </div>\n            <div className={styles.button}></div>\n            <div className={styles.button}></div>\n            <div className={styles.button}>\n                <NavLink className={styles.search}\n                        activeClassName={styles.active}\n                         to=''>\n                    SEARCH\n                </NavLink>\n                <div className={styles.searchBar}></div>\n            </div>\n        </div>\n    );\n}\nexport const Nava = React.memo(NavaSecret)","import React from \"react\";\nimport styles from \"../Sidebar.module.css\";\n\nexport type postType = {\n    text: string\n    id: string\n}\n\ntype BestPostsPropsType = {\n    bestPosts: Array<postType>\n}\n\nconst BestPostsSecret: React.FC<BestPostsPropsType> = (props) => {\n    return (\n        <div className={styles.posts}>\n            {props.bestPosts.map(bestPost => {\n                return <div key={bestPost.id}\n                            className={styles.post}>{bestPost.text}</div>\n            })}\n        </div>\n    );\n}\nexport const BestPosts = React.memo(BestPostsSecret)","import React from 'react'\nimport {tagType} from \"../../../../../redux/sidebarReducer\";\n\ntype TagPropsType = tagType\nconst TagSecret: React.FC<TagPropsType> = (props) => {\n\n    //styles\n    const tagStyle = {\n        fontSize: props.priority\n    }\n\n    //return\n    return (\n        <span style={tagStyle}>{props.name} </span>\n    );\n}\nexport const Tag = React.memo(TagSecret)","import styles from \"../Sidebar.module.css\";\nimport React from \"react\";\nimport {Tag} from \"./Tag/Tag\";\nimport {tagType} from \"../../../../redux/sidebarReducer\";\n\ntype TagsPropsType = {\n    tags: Array<tagType>\n}\n\n const TagsSecret: React.FC<TagsPropsType> = (props) => {\n\n    return (\n        <div>\n            {props.tags.map((tag) => <Tag name={tag.name} priority={tag.priority}/>)}\n        </div>\n    );\n}\nexport const Tags = React.memo(TagsSecret)","import React from 'react';\nimport styles from './Sidebar.module.css';\nimport {BestPosts} from \"./BestPosts/BestPosts\";\nimport {Tags} from \"./Tags/Tags\";\nimport {sideBarType} from \"../../../redux/sidebarReducer\";\n\ntype SidebarPropsType = {\n    state: sideBarType\n}\n\nconst SidebarSecret: React.FC<SidebarPropsType> = (props) => {\n    return (\n        <div id={styles.sidebar}>\n            <BestPosts bestPosts={props.state.bestPosts}/>\n            <Tags tags={props.state.tags}/>\n        </div>\n    );\n}\nexport const Sidebar = React.memo(SidebarSecret)","import React from 'react';\nimport styles from './Profile.module.css';\n\nconst BestSecret = () => {\n    return (\n        <div>Best</div>\n    )\n}\nexport const Best = React.memo(BestSecret)","import {commentType} from \"../../../../redux/profileReducer\";\r\nimport {actionsType} from \"../../../../redux/redux_store\";\r\nimport React from \"react\";\r\n\r\nexport type CommentPropsType = {\r\n    state: commentType\r\n}\r\nconst CommentSecret: React.FC<CommentPropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <div>{props.state.postId}</div>\r\n            <div>{props.state.text}</div>\r\n            <div>{props.state.id}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Comment = React.memo(CommentSecret)","import React, {ChangeEvent} from 'react';\nimport {ProfilePageType} from \"../../../redux/profileReducer\";\nimport {Comment} from \"./Comment/Comment\";\n\ntype ProfilePropsType = {\n    onChangeCallback: (event: ChangeEvent<HTMLInputElement>) => void\n    onClickCallback: () => void\n    state: ProfilePageType\n}\n\nconst ProfileSecret: React.FC<ProfilePropsType> = (props) => {\n    return (\n        <div>\n            Commentaries\n            {props.state.comments.map(com => <Comment state={com}/>)}\n            <div>\n                <input onChange={props.onChangeCallback} value={props.state.newComm}/> new comment<hr/>\n                <button onClick={props.onClickCallback}>post</button>\n            </div>\n        </div>\n    )\n}\nexport const Profile = React.memo(ProfileSecret)\n\n","import React from \"react\";\r\nimport {StoreType} from \"./redux_store\";\r\n\r\nexport const StoreContext = React.createContext({} as StoreType)","import React, {ChangeEvent} from 'react';\nimport {\n    addCommentActionCreator,\n    changeNewCommentTextActionCreator,\n} from \"../../../redux/profileReducer\";\nimport {Profile} from \"./Profile\";\nimport {StoreContext} from \"../../../redux/StoreContext\";\n\n/*\ntype ProfileContainerPropsType = {\n    state: ProfilePageType\n    dispatch: (action: actionsType) => void\n}*/\n\nconst ProfileContainerSecret: React.FC = () => {\n    return (\n        <StoreContext.Consumer>\n            {\n                (store) => {\n                    const onChangeCallback = (event: ChangeEvent<HTMLInputElement>) => {\n                        store.dispatch(changeNewCommentTextActionCreator(event.currentTarget.value))\n                    }\n                    const onClickCallback = () => {\n                        store.dispatch(addCommentActionCreator(store.getState().profilePage.newComm))\n                        store.dispatch(changeNewCommentTextActionCreator(''))\n                    }\n\n                    return <Profile onChangeCallback={onChangeCallback}\n                             onClickCallback={onClickCallback}\n                             state={store.getState().profilePage}/>\n            }\n            }\n        </StoreContext.Consumer>\n    )\n}\nexport const ProfileContainer = React.memo(ProfileContainerSecret)\n\n","import React from \"react\";\nimport styles from './LikesCount.module.css'\n\n//types\ntype LikesCountPropsType = {\n    postId: string\n    likesCount: number\n    changeLikesCount: (change: boolean, postId: string) => void\n}\n\nconst LikesCountSecret: React.FC<LikesCountPropsType> = (props) => {\n\n    //return\n    return (\n        <div className={styles.like}>\n            <button className={styles.btn} onClick={() => props.changeLikesCount(false, props.postId)}>-</button>\n            <button>{props.likesCount}</button>\n            <button className={styles.btn} onClick={() => props.changeLikesCount(true, props.postId)}>+</button>\n        </div>\n    )\n}\nexport const LikesCount = React.memo(LikesCountSecret)\n","import React from \"react\";\nimport styles from './Post.module.css';\nimport {PostType} from \"../../../../redux/postsReducer\";\nimport {LikesCount} from \"./LikesCount/LikesCount\";\n\n//types\nexport type PostPropsType = {\n    postInfo: PostType\n    changeLikesCount: (change: boolean, postId: string) => void\n}\n\n//components\nconst PostSecret: React.FC<PostPropsType> = (props) => {\n\n    //return\n    return (\n        <div className={styles.post}>\n            <div className={styles.text}>\n                <div className={styles.postText}>{props.postInfo.postText}</div>\n                <div className={styles.postDate}>{props.postInfo.postDate}</div>\n                <LikesCount postId={props.postInfo.postId}\n                            likesCount={props.postInfo.postLikes}\n                            changeLikesCount={props.changeLikesCount}/>\n            </div>\n            <div className={styles.image}>\n                <img src={props.postInfo.postPhoto} alt='not available'/>\n            </div>\n        </div>\n    );\n}\nexport const Post = React.memo(PostSecret)","import React, {ChangeEvent} from \"react\";\r\nimport classes from \"./Posts.module.css\";\r\nimport {Post} from \"./Post/Post\";\r\nimport {postsPageType} from \"../../../redux/postsReducer\";\r\n\r\nexport type PostsPropsType = {\r\n    state: postsPageType\r\n    onChangeFilterHandler: (event: ChangeEvent<HTMLSelectElement>) => void\r\n    changeLikesCount: (change: boolean, postId: string) => void\r\n}\r\n\r\nexport const Posts: React.FC<PostsPropsType> = (props) => {\r\n\r\n    //return\r\n    return (\r\n        <div>\r\n            Sorted by\r\n            <select value={props.state.filter} onChange={props.onChangeFilterHandler}>\r\n                <option value={'date'}>date</option>\r\n                <option value={'rate'}>rate</option>\r\n                <option value={'reverse rate'}>reverse rate</option>\r\n            </select>\r\n            <div id={classes.posts}>\r\n                {props.state.posts.map((post) => {\r\n                    return (\r\n                        <div key={post.postId}>\r\n                            <Post postInfo={post}\r\n                                  changeLikesCount={props.changeLikesCount}/>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\nimport {changeLikesCountActionCreator, filterPostsActionCreator} from \"../../../redux/postsReducer\";\nimport {StoreContext} from \"../../../redux/StoreContext\";\nimport {Posts} from \"./Posts\";\n\n//components\nexport const PostsContainer: React.FC = () => {\n\n    //return\n    return (\n        <StoreContext.Consumer>\n            {\n                (store) => {\n                    //callbacks\n                    const onChangeFilterHandler = (event: ChangeEvent<HTMLSelectElement>) => {\n                        store.dispatch(filterPostsActionCreator(event.currentTarget.value))\n                    }\n                    const changeLikesCount = (change: boolean, postId: string) => {\n                        store.dispatch(changeLikesCountActionCreator(change, postId))\n                    }\n\n                    //return\n                    return (\n                        <Posts state={store.getState().postsPage}\n                               onChangeFilterHandler={onChangeFilterHandler}\n                               changeLikesCount={changeLikesCount}/>\n                    )\n                }\n            }</StoreContext.Consumer>\n    );\n}","import React from \"react\";\nimport styles from \"./Chat.module.css\";\nimport {ChatType} from \"../../../../redux/dialogsReducer\";\n\n//types\ntype ChatPropsType = {\n    messages: Array<ChatType>\n}\n\n//components\nconst ChatSecret: React.FC<ChatPropsType> = (props) => {\n\n    //callbacks\n    const mappedMessages = props.messages.map((m) => {\n        return (\n            <div className={(m.author === 'you') ? styles.you : styles.notYou}\n                 key={m.id}>\n                {m.author === 'notYou' ?\n                    <img src={'https://glennmiller.pythonanywhere.com/static/admin_ava.jpg'}/> : false}\n                <div>\n                    <div className={styles.author}>\n                        {m.author}\n                    </div>\n                    <div className={styles.message}>\n                        {m.message}\n                    </div>\n                </div>\n                {m.author === 'you' ?\n                    <img src={'https://glennmiller.pythonanywhere.com/static/admin_ava.jpg'}/> : false}\n\n            </div>\n        );\n    });\n\n    //return\n    return (\n        <div>\n            {mappedMessages}\n        </div>\n    );\n}\nexport const Chat = React.memo(ChatSecret)","import React from \"react\";\nimport styles from \"../Dialogs.module.css\";\nimport {NavLink} from \"react-router-dom\";\n\n//types\nexport type OpenDialogPropsType = {\n    id: string\n    name: string\n}\n\n//components\nconst OpenDialogSecret: React.FC<OpenDialogPropsType> = (props) => {\n    return (\n        <div className={styles.openDialog}>\n            <NavLink to={`/dialogs/${props.id}`}>\n                {props.name}\n            </NavLink>\n        </div>\n    )\n}\nexport const OpenDialog = React.memo(OpenDialogSecret)","import React from 'react';\nimport styles from './Dialogs.module.css'\nimport {Chat} from \"./Chat/Chat\";\nimport {OpenDialog} from \"./OpenDialog/OpenDialog\";\nimport {dialogsPageType} from \"../../../redux/dialogsReducer\";\n\n//types\ntype DialogsPropsType = {\n    state: dialogsPageType\n    setFilter: (filterValue: string) => void\n}\n\n//components\nconst DialogsSecret: React.FC<DialogsPropsType> = (props) => {\n\n    //return\n    return (\n        <div className={styles.container}>\n            <div className={styles.filter}>\n                <div onClick={() => props.setFilter('you')}>you</div>\n                <div onClick={() => props.setFilter('notYou')}>notYou</div>\n                <div onClick={() => props.setFilter('all')}>all</div>\n            </div>\n            <div className={styles.openDialogs}>\n                {props.state.dialogs.map((dialog) => {\n                    return (\n                        <OpenDialog key={dialog.id} id={dialog.id} name={dialog.name}/>\n                    );\n                })}\n            </div>\n            <div className={styles.dialogs}>\n                <Chat messages={props.state.chat}/>\n            </div>\n        </div>\n    );\n}\nexport const Dialogs = React.memo(DialogsSecret)","import React from \"react\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {StoreContext} from \"../../../redux/StoreContext\";\r\nimport {filterMessagesActionCreator} from \"../../../redux/dialogsReducer\";\r\n\r\nexport const DialogsContainer = () => {\r\n    //return\r\n    return (\r\n        <StoreContext.Consumer>\r\n            {\r\n                (store) => {\r\n                    const setFilter = (filterValue: string) => {\r\n                        store.dispatch(filterMessagesActionCreator(filterValue))\r\n                    }\r\n                    return <Dialogs state={store.getState().dialogsPage} setFilter={setFilter}/>\r\n                }\r\n            }\r\n        </StoreContext.Consumer>\r\n    )\r\n}","import React, {ChangeEvent, LegacyRef} from 'react';\nimport styles from './ShareStory.module.css';\nimport {shareStoryPageType} from \"../../../redux/shareStoryReducer\";\n\ntype ShareStoryPropsType = {\n    state: shareStoryPageType\n    onClickCallback: (formText: string) => void\n    onChangeCallback: (event: ChangeEvent<HTMLTextAreaElement>) => void\n}\n\n//components\nconst ShareStorySecret: React.FC<ShareStoryPropsType> = (props) => {\n    const ref: LegacyRef<HTMLTextAreaElement> | undefined = React.createRef()\n\n    //return\n    return (\n        <div>\n            <textarea placeholder={'Share your story with us'}\n                      value={props.state.storyText}\n                      onChange={(event) => props.onChangeCallback(event)}\n                      maxLength={1000}\n                      ref={ref}\n                      className={styles.txt}> </textarea>\n            <button onClick={() => props.onClickCallback(ref.current ? ref.current.value : '')}\n                    className={styles.btn}>Send\n            </button>\n        </div>\n    )\n}\nexport const ShareStory = React.memo(ShareStorySecret)","import React, {ChangeEvent, LegacyRef} from \"react\";\r\nimport {ShareStory} from \"./ShareStory\";\r\nimport {StoreContext} from \"../../../redux/StoreContext\";\r\nimport {addPostActionCreator} from \"../../../redux/postsReducer\";\r\nimport {changeShareStoryTextActionCreator} from \"../../../redux/shareStoryReducer\";\r\n\r\nexport const ShareStoryContainer = () => {\r\n\r\n    //return\r\n    return (\r\n        <StoreContext.Consumer>\r\n            {\r\n                (store) => {\r\n\r\n                    //callbacks\r\n                    const onClickCallback = (formText: string) => {\r\n                        store.dispatch(addPostActionCreator(formText))\r\n                        store.dispatch(changeShareStoryTextActionCreator(''))\r\n                    }\r\n                    const onChangeCallback = (event: ChangeEvent<HTMLTextAreaElement>) => {\r\n                        store.dispatch(changeShareStoryTextActionCreator(event.currentTarget.value))\r\n                    }\r\n\r\n                    //return\r\n                    return <ShareStory state={store.getState().shareStoryPage}\r\n                                       onChangeCallback={onChangeCallback}\r\n                                       onClickCallback={onClickCallback}/>\r\n                }\r\n            }\r\n        </StoreContext.Consumer>\r\n    )\r\n}","import React from 'react';\nimport styles from './Content.module.css';\nimport {Nava} from \"./Nava/Nava\";\nimport {Sidebar} from \"./Sidebar/Sidebar\";\nimport {Redirect, Route} from 'react-router-dom';\nimport {Best} from \"./Best/Best\";\nimport {ProfileContainer} from \"./Profile/ProfileContainer\";\nimport {actionsType, stateType} from \"../../redux/redux_store\";\nimport {PostsContainer} from \"./Posts/PostsContainer\";\nimport {DialogsContainer} from \"./Dialogs/DialogsContainer\";\nimport {ShareStoryContainer} from \"./ShareStory/ShareStoryContainer\";\n\n//types\ntype ContentPropsType = {\n    state: stateType\n    dispatch: (action: actionsType) => void\n}\n\n//components\nexport const Content: React.FC<ContentPropsType> = (props) => {\n\n    return (\n        <div id={styles.content}>\n            <div id={styles.nava}><Nava/></div>\n            <div id={styles.contentContent}>\n                <div id={styles.general}>\n                    <Route path={'/'} exact render={() => <Redirect to={'/main'}/>}/>\n                    <Route path='/main'\n                           render={() => <PostsContainer/>}/>\n                    <Route path='/best' component={Best}/>\n                    <Route path='/share' render={() => <ShareStoryContainer/>}/>\n                    <Route path='/profile' render={() => <ProfileContainer/>}/>\n                    <Route path='/dialogs' render={() => <DialogsContainer/>}/>\n                </div>\n            </div>\n            <div id={styles.sidebar}>\n                <div id={styles.general}>\n                    <Sidebar state={props.state.sideBar}/></div>\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport classes from './Footer.module.css';\n\n\nconst FooterSecret = () => {\n    return (\n        <div id={classes.footer}>\n            <ul>\n                <li><NavLink to='/'>main</NavLink></li>\n                <li><NavLink to='/best'>best</NavLink></li>\n                <li><NavLink to='/profile'>profile</NavLink></li>\n                <li><NavLink to='/share'>share</NavLink></li>\n            </ul>\n            <div>\n                <img src='https://podslyshano.com/images/logo.svg' alt='not found'/>\n            </div>\n            <ul>\n                <li><a href={'https://vk.com/racoonister'}>facebook</a></li>\n                <li><a href={'https://vk.com/racoonister'}>twitter</a></li>\n                <li><a href={'https://vk.com/racoonister'}>telegram</a></li>\n                <li><a href={'https://vk.com/racoonister'}>vk</a></li>\n            </ul>\n        </div>\n    );\n}\nexport const Footer = React.memo(FooterSecret)","import React, {useState, memo} from 'react';\nimport './App.css';\nimport {Header} from \"./components/Header/Header\";\nimport {Content} from \"./components/Content/Content\";\nimport {Footer} from \"./components/Footer/Footer\";\nimport {HashRouter} from \"react-router-dom\";\nimport {actionsType, stateType} from \"./redux/redux_store\";\n\n//types\nexport type wayType = 0 | 1\ntype AppPropsType = {\n    state: stateType\n    dispatch: (action: actionsType) => void\n}\n\nfunction AppSecret(props: AppPropsType) {\n    const [way, setWay] = useState<wayType>(1)\n\n    return (\n        <HashRouter>\n            <div id='appWrapper'>\n                {way === 0 ? <Header setWay={setWay}/> :\n                    <>\n                        <Content state={props.state}\n                                 dispatch={props.dispatch}/>\n                        <Footer/>\n                    </>}\n            </div>\n        </HashRouter>\n    );\n}\nconst App = React.memo(AppSecret)\n\nexport default App;\n","import React from 'react';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {store} from './redux/redux_store'\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport {StoreContext} from './redux/StoreContext';\n\nconst renderEntireTree = () => {\n    ReactDOM.render(\n        <React.StrictMode>\n            <StoreContext.Provider value={store}>\n                <App state={store.getState()}\n                     dispatch={store.dispatch.bind(store)}/>\n            </StoreContext.Provider>\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n}\n\nrenderEntireTree();\nstore.subscribe(() => renderEntireTree())\n\n// If you want to start measuring performance in your app, pass a function\n// tlog results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}